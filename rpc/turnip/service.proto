syntax = "proto3";

package turnipxenon.v1;
option go_package = "rpc/turnip";

import "google/protobuf/timestamp.proto";

// todo documentation
// todo refactor

// Turnip handles all processes to internal services
service Turnip {
  // user

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc Login(LoginRequest) returns (LoginResponse);

  // content

  rpc CreateContent(ContentRequestResponse) returns (ContentRequestResponse);
  rpc GetContentById(PrimaryIdRequest) returns (ContentRequestResponse);
  rpc GetContentBatchById(PrimaryIdRequest) returns (MultipleContentResponse);
  rpc GetAllContent(GetAllContentRequest) returns (MultipleContentResponse);
  // inclusive or, will return contents with at least one of the tags
  rpc GetContentsByTagInclusive(GetContentsByTagRequest) returns (MultipleContentResponse);
  // strict and, will only return contents with the following tags
  rpc GetContentsByTagStrict(GetContentsByTagRequest) returns (MultipleContentResponse);
  // todo: GetAllContentByTag (make a tree like structure? is that possible?)
  rpc UpdateContent(ContentRequestResponse) returns (ContentRequestResponse);
  rpc DeleteContent(PrimaryIdRequest) returns (ContentRequestResponse);
  rpc GetContentBySlug(GetContentBySlugRequest) returns (ContentRequestResponse);

  // potato

  rpc RevalidateStaticPath(RevalidateStaticPathRequest) returns (RevalidateStaticPathResponse);
}

// region models
message User {
  string username = 1;
  string primary_id = 2;
}

message Token {
  string access_token = 1;
  string username = 2; // special case; otherwise use uuid
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp expires_at = 4;
}

message AccessDetails {
  repeated string allowed_domains = 1;
}

message Content {
  string title = 1;
  string description = 2;
  string content = 3;
  optional string media = 4;
  repeated string tag_list = 5;
  AccessDetails access_details = 6;
  map<string, string> meta = 7;
  string primary_id = 8;
  google.protobuf.Timestamp created_at = 9;
  string author_id = 10;
  optional string slug = 11;
  optional string placeholder = 12; // todo: reserve 12 to not break future versions
}
// endregion models

// region request and responses
message CreateUserRequest {
  string username = 1;
  string password = 2;
}

message CreateUserResponse {
  string msg = 1; // using msg to follow twirp's format
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  Token token = 1;
  User user = 2;
}

message ContentRequestResponse {
  Content item = 1;
}

message PrimaryIdRequest {
  string primary_id = 1;
}

message GetContentBySlugRequest {
  string slug = 1;
}

message GetContentByIdResponse {
  Content item = 1;
}

message GetAllContentRequest {}

message MultipleContentResponse {
  repeated Content item_list = 1;
}

message MultiplePrimaryIdRequest {
  repeated string primary_id_list = 1;
}

message GetContentsByTagRequest {
  repeated string tag_list = 1;
}

message RevalidateStaticPathRequest {
  string path = 1;
}

message RevalidateStaticPathResponse {
  string message = 1;
}

// endregion request and responses
